use crate::ast::*;

use alloc::boxed::Box;

grammar;

extern {
    type Error = crate::error::Error;
}

pub Program: Program<'input> = 
    <exprs:(<Expr> ";")*> => Program {
        exprs
    };

pub Expr: Expr<'input> = {
    <lhs:AtomExpr> <operator:BinaryOperator> <rhs:Expr> => Expr::BinaryOperation {
        lhs: Box::new(lhs),
        operator,
        rhs: Box::new(rhs)
    },

    AtomExpr => <>,
}

AtomExpr: Expr<'input> = {
    <start:@L> <int:Int> <end:@R> => Expr::Int(start..end, int),
    <start:@L> <float:Float> <end:@R> => Expr::Float(start..end, float),
    <start:@L> <ident:Ident> <end:@R> => Expr::Ident(start..end, ident),
    <start:@L> <string:String> <end:@R> => Expr::String(start..end, string),

    "(" <expr:Expr> ")" => expr,
}

Int: i32 = 
    <start:@L> <int:r"[0-9]+"> <end:@R> => int.parse().unwrap();

Float: f32 = 
    <start:@L> <float:"[0-9].[0-9]+"> <end:@R> => float.parse().unwrap();

Ident: &'input str = 
    r"[a-zA-Z][a-zA-Z0-9]*" => <>;

String: &'input str = r#"".*""# => <>;

BinaryOperator: BinaryOperator = {
    r"\+" => BinaryOperator::Add,
    r"-" => BinaryOperator::Sub,
    r"\*" => BinaryOperator::Mul,
    r"\\" => BinaryOperator::Div
}

TypeAnnotation: TypeAnnotation = {
    "int" => TypeAnnotation::Int,
    "float" => TypeAnnotation::Float,
    "str" => TypeAnnotation::String,
}
